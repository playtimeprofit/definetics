/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface DefineInterface extends ethers.utils.Interface {
  functions: {
    "ETHRewardsFee()": FunctionFragment;
    "addFixedSaleEarlyParticipants(address[])": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "automatedMarketMakerPairs(address)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "bounceFixedSaleWallet()": FunctionFragment;
    "claim()": FunctionFragment;
    "decimals()": FunctionFragment;
    "decreaseAllowance(address,uint256)": FunctionFragment;
    "dividendTokenBalanceOf(address)": FunctionFragment;
    "dividendTracker()": FunctionFragment;
    "excludeFromFees(address,bool)": FunctionFragment;
    "excludeMultipleAccountsFromFees(address[],bool)": FunctionFragment;
    "fixedSaleBuyers(address)": FunctionFragment;
    "fixedSaleEarlyParticipantBuysThreshold()": FunctionFragment;
    "fixedSaleEarlyParticipantDuration()": FunctionFragment;
    "fixedSaleEarlyParticipants(address)": FunctionFragment;
    "fixedSaleStartTimestamp()": FunctionFragment;
    "gasForProcessing()": FunctionFragment;
    "getAccountDividendsInfo(address)": FunctionFragment;
    "getAccountDividendsInfoAtIndex(uint256)": FunctionFragment;
    "getClaimWait()": FunctionFragment;
    "getLastProcessedIndex()": FunctionFragment;
    "getNumberOfDividendTokenHolders()": FunctionFragment;
    "getTotalDividendsDistributed()": FunctionFragment;
    "getTradingIsEnabled()": FunctionFragment;
    "increaseAllowance(address,uint256)": FunctionFragment;
    "isExcludedFromFees(address)": FunctionFragment;
    "liquidityFee()": FunctionFragment;
    "liquidityWallet()": FunctionFragment;
    "maxSellTransactionAmount()": FunctionFragment;
    "name()": FunctionFragment;
    "numberOfFixedSaleBuys()": FunctionFragment;
    "owner()": FunctionFragment;
    "processDividendTracker(uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "sellFeeIncreaseFactor()": FunctionFragment;
    "setAutomatedMarketMakerPair(address,bool)": FunctionFragment;
    "swapTokensAtAmount()": FunctionFragment;
    "symbol()": FunctionFragment;
    "totalFees()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "tradingEnabledTimestamp()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "uniswapV2Pair()": FunctionFragment;
    "uniswapV2Router()": FunctionFragment;
    "updateClaimWait(uint256)": FunctionFragment;
    "updateDividendTracker(address)": FunctionFragment;
    "updateGasForProcessing(uint256)": FunctionFragment;
    "updateLiquidityWallet(address)": FunctionFragment;
    "updateUniswapV2Router(address)": FunctionFragment;
    "withdrawableDividendOf(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "ETHRewardsFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addFixedSaleEarlyParticipants",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "automatedMarketMakerPairs",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "bounceFixedSaleWallet",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "claim", values?: undefined): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "dividendTokenBalanceOf",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "dividendTracker",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "excludeFromFees",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "excludeMultipleAccountsFromFees",
    values: [string[], boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "fixedSaleBuyers",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "fixedSaleEarlyParticipantBuysThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fixedSaleEarlyParticipantDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fixedSaleEarlyParticipants",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "fixedSaleStartTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "gasForProcessing",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountDividendsInfo",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountDividendsInfoAtIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getClaimWait",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLastProcessedIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNumberOfDividendTokenHolders",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalDividendsDistributed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTradingIsEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isExcludedFromFees",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidityFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquidityWallet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxSellTransactionAmount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "numberOfFixedSaleBuys",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "processDividendTracker",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sellFeeIncreaseFactor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAutomatedMarketMakerPair",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "swapTokensAtAmount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(functionFragment: "totalFees", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tradingEnabledTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapV2Pair",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapV2Router",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateClaimWait",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateDividendTracker",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateGasForProcessing",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateLiquidityWallet",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateUniswapV2Router",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawableDividendOf",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "ETHRewardsFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addFixedSaleEarlyParticipants",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "automatedMarketMakerPairs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "bounceFixedSaleWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dividendTokenBalanceOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dividendTracker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "excludeFromFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "excludeMultipleAccountsFromFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fixedSaleBuyers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fixedSaleEarlyParticipantBuysThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fixedSaleEarlyParticipantDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fixedSaleEarlyParticipants",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fixedSaleStartTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "gasForProcessing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccountDividendsInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccountDividendsInfoAtIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getClaimWait",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastProcessedIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNumberOfDividendTokenHolders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalDividendsDistributed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTradingIsEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isExcludedFromFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidityFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidityWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxSellTransactionAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "numberOfFixedSaleBuys",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "processDividendTracker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sellFeeIncreaseFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAutomatedMarketMakerPair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapTokensAtAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "totalFees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tradingEnabledTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapV2Pair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapV2Router",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateClaimWait",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateDividendTracker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateGasForProcessing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateLiquidityWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateUniswapV2Router",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawableDividendOf",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "ExcludeFromFees(address,bool)": EventFragment;
    "ExcludeMultipleAccountsFromFees(address[],bool)": EventFragment;
    "FixedSaleBuy(address,uint256,bool,uint256)": EventFragment;
    "FixedSaleEarlyParticipantsAdded(address[])": EventFragment;
    "GasForProcessingUpdated(uint256,uint256)": EventFragment;
    "LiquidityWalletUpdated(address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "ProcessedDividendTracker(uint256,uint256,uint256,bool,uint256,address)": EventFragment;
    "SendDividends(uint256,uint256)": EventFragment;
    "SetAutomatedMarketMakerPair(address,bool)": EventFragment;
    "SwapAndLiquify(uint256,uint256,uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "UpdateDividendTracker(address,address)": EventFragment;
    "UpdateUniswapV2Router(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExcludeFromFees"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ExcludeMultipleAccountsFromFees"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FixedSaleBuy"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "FixedSaleEarlyParticipantsAdded"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GasForProcessingUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidityWalletUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProcessedDividendTracker"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SendDividends"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "SetAutomatedMarketMakerPair"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SwapAndLiquify"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateDividendTracker"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateUniswapV2Router"): EventFragment;
}

export class Define extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: DefineInterface;

  functions: {
    ETHRewardsFee(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "ETHRewardsFee()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    addFixedSaleEarlyParticipants(
      accounts: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addFixedSaleEarlyParticipants(address[])"(
      accounts: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "allowance(address,address)"(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "approve(address,uint256)"(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    automatedMarketMakerPairs(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "automatedMarketMakerPairs(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    bounceFixedSaleWallet(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "bounceFixedSaleWallet()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    claim(overrides?: Overrides): Promise<ContractTransaction>;

    "claim()"(overrides?: Overrides): Promise<ContractTransaction>;

    decimals(overrides?: CallOverrides): Promise<{
      0: number;
    }>;

    "decimals()"(overrides?: CallOverrides): Promise<{
      0: number;
    }>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "decreaseAllowance(address,uint256)"(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    dividendTokenBalanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "dividendTokenBalanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    dividendTracker(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "dividendTracker()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    excludeFromFees(
      account: string,
      excluded: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "excludeFromFees(address,bool)"(
      account: string,
      excluded: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    excludeMultipleAccountsFromFees(
      accounts: string[],
      excluded: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "excludeMultipleAccountsFromFees(address[],bool)"(
      accounts: string[],
      excluded: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    fixedSaleBuyers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "fixedSaleBuyers(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    fixedSaleEarlyParticipantBuysThreshold(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "fixedSaleEarlyParticipantBuysThreshold()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    fixedSaleEarlyParticipantDuration(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "fixedSaleEarlyParticipantDuration()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    fixedSaleEarlyParticipants(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "fixedSaleEarlyParticipants(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    fixedSaleStartTimestamp(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "fixedSaleStartTimestamp()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    gasForProcessing(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "gasForProcessing()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    getAccountDividendsInfo(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: BigNumber;
      7: BigNumber;
    }>;

    "getAccountDividendsInfo(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: BigNumber;
      7: BigNumber;
    }>;

    getAccountDividendsInfoAtIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: BigNumber;
      7: BigNumber;
    }>;

    "getAccountDividendsInfoAtIndex(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: BigNumber;
      7: BigNumber;
    }>;

    getClaimWait(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "getClaimWait()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    getLastProcessedIndex(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "getLastProcessedIndex()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    getNumberOfDividendTokenHolders(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "getNumberOfDividendTokenHolders()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    getTotalDividendsDistributed(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "getTotalDividendsDistributed()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    getTradingIsEnabled(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    "getTradingIsEnabled()"(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "increaseAllowance(address,uint256)"(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    isExcludedFromFees(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isExcludedFromFees(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    liquidityFee(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "liquidityFee()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    liquidityWallet(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "liquidityWallet()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    maxSellTransactionAmount(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "maxSellTransactionAmount()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    name(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "name()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    numberOfFixedSaleBuys(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "numberOfFixedSaleBuys()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    owner(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "owner()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    processDividendTracker(
      gas: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "processDividendTracker(uint256)"(
      gas: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    sellFeeIncreaseFactor(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "sellFeeIncreaseFactor()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    setAutomatedMarketMakerPair(
      pair: string,
      value: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setAutomatedMarketMakerPair(address,bool)"(
      pair: string,
      value: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    swapTokensAtAmount(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "swapTokensAtAmount()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    symbol(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "symbol()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    totalFees(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "totalFees()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    totalSupply(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "totalSupply()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    tradingEnabledTimestamp(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "tradingEnabledTimestamp()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transfer(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferFrom(address,address,uint256)"(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    uniswapV2Pair(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "uniswapV2Pair()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    uniswapV2Router(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "uniswapV2Router()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    updateClaimWait(
      claimWait: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateClaimWait(uint256)"(
      claimWait: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateDividendTracker(
      newAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateDividendTracker(address)"(
      newAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateGasForProcessing(
      newValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateGasForProcessing(uint256)"(
      newValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateLiquidityWallet(
      newLiquidityWallet: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateLiquidityWallet(address)"(
      newLiquidityWallet: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateUniswapV2Router(
      newAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateUniswapV2Router(address)"(
      newAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    withdrawableDividendOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "withdrawableDividendOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;
  };

  ETHRewardsFee(overrides?: CallOverrides): Promise<BigNumber>;

  "ETHRewardsFee()"(overrides?: CallOverrides): Promise<BigNumber>;

  addFixedSaleEarlyParticipants(
    accounts: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addFixedSaleEarlyParticipants(address[])"(
    accounts: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "allowance(address,address)"(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "approve(address,uint256)"(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  automatedMarketMakerPairs(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "automatedMarketMakerPairs(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  "balanceOf(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  bounceFixedSaleWallet(overrides?: CallOverrides): Promise<string>;

  "bounceFixedSaleWallet()"(overrides?: CallOverrides): Promise<string>;

  claim(overrides?: Overrides): Promise<ContractTransaction>;

  "claim()"(overrides?: Overrides): Promise<ContractTransaction>;

  decimals(overrides?: CallOverrides): Promise<number>;

  "decimals()"(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "decreaseAllowance(address,uint256)"(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  dividendTokenBalanceOf(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "dividendTokenBalanceOf(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  dividendTracker(overrides?: CallOverrides): Promise<string>;

  "dividendTracker()"(overrides?: CallOverrides): Promise<string>;

  excludeFromFees(
    account: string,
    excluded: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "excludeFromFees(address,bool)"(
    account: string,
    excluded: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  excludeMultipleAccountsFromFees(
    accounts: string[],
    excluded: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "excludeMultipleAccountsFromFees(address[],bool)"(
    accounts: string[],
    excluded: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  fixedSaleBuyers(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  "fixedSaleBuyers(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  fixedSaleEarlyParticipantBuysThreshold(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "fixedSaleEarlyParticipantBuysThreshold()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  fixedSaleEarlyParticipantDuration(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "fixedSaleEarlyParticipantDuration()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  fixedSaleEarlyParticipants(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "fixedSaleEarlyParticipants(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  fixedSaleStartTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  "fixedSaleStartTimestamp()"(overrides?: CallOverrides): Promise<BigNumber>;

  gasForProcessing(overrides?: CallOverrides): Promise<BigNumber>;

  "gasForProcessing()"(overrides?: CallOverrides): Promise<BigNumber>;

  getAccountDividendsInfo(
    account: string,
    overrides?: CallOverrides
  ): Promise<{
    0: string;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
    5: BigNumber;
    6: BigNumber;
    7: BigNumber;
  }>;

  "getAccountDividendsInfo(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<{
    0: string;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
    5: BigNumber;
    6: BigNumber;
    7: BigNumber;
  }>;

  getAccountDividendsInfoAtIndex(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    0: string;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
    5: BigNumber;
    6: BigNumber;
    7: BigNumber;
  }>;

  "getAccountDividendsInfoAtIndex(uint256)"(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    0: string;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
    5: BigNumber;
    6: BigNumber;
    7: BigNumber;
  }>;

  getClaimWait(overrides?: CallOverrides): Promise<BigNumber>;

  "getClaimWait()"(overrides?: CallOverrides): Promise<BigNumber>;

  getLastProcessedIndex(overrides?: CallOverrides): Promise<BigNumber>;

  "getLastProcessedIndex()"(overrides?: CallOverrides): Promise<BigNumber>;

  getNumberOfDividendTokenHolders(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getNumberOfDividendTokenHolders()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTotalDividendsDistributed(overrides?: CallOverrides): Promise<BigNumber>;

  "getTotalDividendsDistributed()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTradingIsEnabled(overrides?: CallOverrides): Promise<boolean>;

  "getTradingIsEnabled()"(overrides?: CallOverrides): Promise<boolean>;

  increaseAllowance(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "increaseAllowance(address,uint256)"(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  isExcludedFromFees(
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isExcludedFromFees(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  liquidityFee(overrides?: CallOverrides): Promise<BigNumber>;

  "liquidityFee()"(overrides?: CallOverrides): Promise<BigNumber>;

  liquidityWallet(overrides?: CallOverrides): Promise<string>;

  "liquidityWallet()"(overrides?: CallOverrides): Promise<string>;

  maxSellTransactionAmount(overrides?: CallOverrides): Promise<BigNumber>;

  "maxSellTransactionAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

  name(overrides?: CallOverrides): Promise<string>;

  "name()"(overrides?: CallOverrides): Promise<string>;

  numberOfFixedSaleBuys(overrides?: CallOverrides): Promise<BigNumber>;

  "numberOfFixedSaleBuys()"(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  processDividendTracker(
    gas: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "processDividendTracker(uint256)"(
    gas: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  sellFeeIncreaseFactor(overrides?: CallOverrides): Promise<BigNumber>;

  "sellFeeIncreaseFactor()"(overrides?: CallOverrides): Promise<BigNumber>;

  setAutomatedMarketMakerPair(
    pair: string,
    value: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setAutomatedMarketMakerPair(address,bool)"(
    pair: string,
    value: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  swapTokensAtAmount(overrides?: CallOverrides): Promise<BigNumber>;

  "swapTokensAtAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

  symbol(overrides?: CallOverrides): Promise<string>;

  "symbol()"(overrides?: CallOverrides): Promise<string>;

  totalFees(overrides?: CallOverrides): Promise<BigNumber>;

  "totalFees()"(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

  tradingEnabledTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  "tradingEnabledTimestamp()"(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transfer(address,uint256)"(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferFrom(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferFrom(address,address,uint256)"(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  uniswapV2Pair(overrides?: CallOverrides): Promise<string>;

  "uniswapV2Pair()"(overrides?: CallOverrides): Promise<string>;

  uniswapV2Router(overrides?: CallOverrides): Promise<string>;

  "uniswapV2Router()"(overrides?: CallOverrides): Promise<string>;

  updateClaimWait(
    claimWait: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateClaimWait(uint256)"(
    claimWait: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateDividendTracker(
    newAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateDividendTracker(address)"(
    newAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateGasForProcessing(
    newValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateGasForProcessing(uint256)"(
    newValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateLiquidityWallet(
    newLiquidityWallet: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateLiquidityWallet(address)"(
    newLiquidityWallet: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateUniswapV2Router(
    newAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateUniswapV2Router(address)"(
    newAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  withdrawableDividendOf(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "withdrawableDividendOf(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    ETHRewardsFee(overrides?: CallOverrides): Promise<BigNumber>;

    "ETHRewardsFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    addFixedSaleEarlyParticipants(
      accounts: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    "addFixedSaleEarlyParticipants(address[])"(
      accounts: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowance(address,address)"(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "approve(address,uint256)"(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    automatedMarketMakerPairs(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "automatedMarketMakerPairs(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bounceFixedSaleWallet(overrides?: CallOverrides): Promise<string>;

    "bounceFixedSaleWallet()"(overrides?: CallOverrides): Promise<string>;

    claim(overrides?: CallOverrides): Promise<void>;

    "claim()"(overrides?: CallOverrides): Promise<void>;

    decimals(overrides?: CallOverrides): Promise<number>;

    "decimals()"(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "decreaseAllowance(address,uint256)"(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    dividendTokenBalanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "dividendTokenBalanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    dividendTracker(overrides?: CallOverrides): Promise<string>;

    "dividendTracker()"(overrides?: CallOverrides): Promise<string>;

    excludeFromFees(
      account: string,
      excluded: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "excludeFromFees(address,bool)"(
      account: string,
      excluded: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    excludeMultipleAccountsFromFees(
      accounts: string[],
      excluded: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "excludeMultipleAccountsFromFees(address[],bool)"(
      accounts: string[],
      excluded: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    fixedSaleBuyers(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    "fixedSaleBuyers(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    fixedSaleEarlyParticipantBuysThreshold(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "fixedSaleEarlyParticipantBuysThreshold()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fixedSaleEarlyParticipantDuration(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "fixedSaleEarlyParticipantDuration()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fixedSaleEarlyParticipants(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "fixedSaleEarlyParticipants(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    fixedSaleStartTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    "fixedSaleStartTimestamp()"(overrides?: CallOverrides): Promise<BigNumber>;

    gasForProcessing(overrides?: CallOverrides): Promise<BigNumber>;

    "gasForProcessing()"(overrides?: CallOverrides): Promise<BigNumber>;

    getAccountDividendsInfo(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: BigNumber;
      7: BigNumber;
    }>;

    "getAccountDividendsInfo(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: BigNumber;
      7: BigNumber;
    }>;

    getAccountDividendsInfoAtIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: BigNumber;
      7: BigNumber;
    }>;

    "getAccountDividendsInfoAtIndex(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: BigNumber;
      7: BigNumber;
    }>;

    getClaimWait(overrides?: CallOverrides): Promise<BigNumber>;

    "getClaimWait()"(overrides?: CallOverrides): Promise<BigNumber>;

    getLastProcessedIndex(overrides?: CallOverrides): Promise<BigNumber>;

    "getLastProcessedIndex()"(overrides?: CallOverrides): Promise<BigNumber>;

    getNumberOfDividendTokenHolders(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getNumberOfDividendTokenHolders()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalDividendsDistributed(overrides?: CallOverrides): Promise<BigNumber>;

    "getTotalDividendsDistributed()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTradingIsEnabled(overrides?: CallOverrides): Promise<boolean>;

    "getTradingIsEnabled()"(overrides?: CallOverrides): Promise<boolean>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "increaseAllowance(address,uint256)"(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isExcludedFromFees(
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isExcludedFromFees(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    liquidityFee(overrides?: CallOverrides): Promise<BigNumber>;

    "liquidityFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    liquidityWallet(overrides?: CallOverrides): Promise<string>;

    "liquidityWallet()"(overrides?: CallOverrides): Promise<string>;

    maxSellTransactionAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "maxSellTransactionAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    "name()"(overrides?: CallOverrides): Promise<string>;

    numberOfFixedSaleBuys(overrides?: CallOverrides): Promise<BigNumber>;

    "numberOfFixedSaleBuys()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    processDividendTracker(
      gas: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "processDividendTracker(uint256)"(
      gas: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    sellFeeIncreaseFactor(overrides?: CallOverrides): Promise<BigNumber>;

    "sellFeeIncreaseFactor()"(overrides?: CallOverrides): Promise<BigNumber>;

    setAutomatedMarketMakerPair(
      pair: string,
      value: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setAutomatedMarketMakerPair(address,bool)"(
      pair: string,
      value: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    swapTokensAtAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "swapTokensAtAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<string>;

    "symbol()"(overrides?: CallOverrides): Promise<string>;

    totalFees(overrides?: CallOverrides): Promise<BigNumber>;

    "totalFees()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    tradingEnabledTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    "tradingEnabledTimestamp()"(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transfer(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transferFrom(address,address,uint256)"(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    uniswapV2Pair(overrides?: CallOverrides): Promise<string>;

    "uniswapV2Pair()"(overrides?: CallOverrides): Promise<string>;

    uniswapV2Router(overrides?: CallOverrides): Promise<string>;

    "uniswapV2Router()"(overrides?: CallOverrides): Promise<string>;

    updateClaimWait(
      claimWait: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateClaimWait(uint256)"(
      claimWait: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateDividendTracker(
      newAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateDividendTracker(address)"(
      newAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateGasForProcessing(
      newValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateGasForProcessing(uint256)"(
      newValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateLiquidityWallet(
      newLiquidityWallet: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateLiquidityWallet(address)"(
      newLiquidityWallet: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateUniswapV2Router(
      newAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateUniswapV2Router(address)"(
      newAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawableDividendOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "withdrawableDividendOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    Approval(
      owner: string | null,
      spender: string | null,
      value: null
    ): EventFilter;

    ExcludeFromFees(account: string | null, isExcluded: null): EventFilter;

    ExcludeMultipleAccountsFromFees(
      accounts: null,
      isExcluded: null
    ): EventFilter;

    FixedSaleBuy(
      account: string | null,
      amount: BigNumberish | null,
      earlyParticipant: boolean | null,
      numberOfBuyers: null
    ): EventFilter;

    FixedSaleEarlyParticipantsAdded(participants: null): EventFilter;

    GasForProcessingUpdated(
      newValue: BigNumberish | null,
      oldValue: BigNumberish | null
    ): EventFilter;

    LiquidityWalletUpdated(
      newLiquidityWallet: string | null,
      oldLiquidityWallet: string | null
    ): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;

    ProcessedDividendTracker(
      iterations: null,
      claims: null,
      lastProcessedIndex: null,
      automatic: boolean | null,
      gas: null,
      processor: string | null
    ): EventFilter;

    SendDividends(tokensSwapped: null, amount: null): EventFilter;

    SetAutomatedMarketMakerPair(
      pair: string | null,
      value: boolean | null
    ): EventFilter;

    SwapAndLiquify(
      tokensSwapped: null,
      ethReceived: null,
      tokensIntoLiqudity: null
    ): EventFilter;

    Transfer(from: string | null, to: string | null, value: null): EventFilter;

    UpdateDividendTracker(
      newAddress: string | null,
      oldAddress: string | null
    ): EventFilter;

    UpdateUniswapV2Router(
      newAddress: string | null,
      oldAddress: string | null
    ): EventFilter;
  };

  estimateGas: {
    ETHRewardsFee(overrides?: CallOverrides): Promise<BigNumber>;

    "ETHRewardsFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    addFixedSaleEarlyParticipants(
      accounts: string[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addFixedSaleEarlyParticipants(address[])"(
      accounts: string[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowance(address,address)"(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "approve(address,uint256)"(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    automatedMarketMakerPairs(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "automatedMarketMakerPairs(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bounceFixedSaleWallet(overrides?: CallOverrides): Promise<BigNumber>;

    "bounceFixedSaleWallet()"(overrides?: CallOverrides): Promise<BigNumber>;

    claim(overrides?: Overrides): Promise<BigNumber>;

    "claim()"(overrides?: Overrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    "decimals()"(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "decreaseAllowance(address,uint256)"(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    dividendTokenBalanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "dividendTokenBalanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    dividendTracker(overrides?: CallOverrides): Promise<BigNumber>;

    "dividendTracker()"(overrides?: CallOverrides): Promise<BigNumber>;

    excludeFromFees(
      account: string,
      excluded: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "excludeFromFees(address,bool)"(
      account: string,
      excluded: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    excludeMultipleAccountsFromFees(
      accounts: string[],
      excluded: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "excludeMultipleAccountsFromFees(address[],bool)"(
      accounts: string[],
      excluded: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    fixedSaleBuyers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "fixedSaleBuyers(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fixedSaleEarlyParticipantBuysThreshold(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "fixedSaleEarlyParticipantBuysThreshold()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fixedSaleEarlyParticipantDuration(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "fixedSaleEarlyParticipantDuration()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fixedSaleEarlyParticipants(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "fixedSaleEarlyParticipants(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fixedSaleStartTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    "fixedSaleStartTimestamp()"(overrides?: CallOverrides): Promise<BigNumber>;

    gasForProcessing(overrides?: CallOverrides): Promise<BigNumber>;

    "gasForProcessing()"(overrides?: CallOverrides): Promise<BigNumber>;

    getAccountDividendsInfo(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAccountDividendsInfo(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAccountDividendsInfoAtIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAccountDividendsInfoAtIndex(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getClaimWait(overrides?: CallOverrides): Promise<BigNumber>;

    "getClaimWait()"(overrides?: CallOverrides): Promise<BigNumber>;

    getLastProcessedIndex(overrides?: CallOverrides): Promise<BigNumber>;

    "getLastProcessedIndex()"(overrides?: CallOverrides): Promise<BigNumber>;

    getNumberOfDividendTokenHolders(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getNumberOfDividendTokenHolders()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalDividendsDistributed(overrides?: CallOverrides): Promise<BigNumber>;

    "getTotalDividendsDistributed()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTradingIsEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    "getTradingIsEnabled()"(overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "increaseAllowance(address,uint256)"(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    isExcludedFromFees(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isExcludedFromFees(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidityFee(overrides?: CallOverrides): Promise<BigNumber>;

    "liquidityFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    liquidityWallet(overrides?: CallOverrides): Promise<BigNumber>;

    "liquidityWallet()"(overrides?: CallOverrides): Promise<BigNumber>;

    maxSellTransactionAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "maxSellTransactionAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    "name()"(overrides?: CallOverrides): Promise<BigNumber>;

    numberOfFixedSaleBuys(overrides?: CallOverrides): Promise<BigNumber>;

    "numberOfFixedSaleBuys()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    processDividendTracker(
      gas: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "processDividendTracker(uint256)"(
      gas: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    sellFeeIncreaseFactor(overrides?: CallOverrides): Promise<BigNumber>;

    "sellFeeIncreaseFactor()"(overrides?: CallOverrides): Promise<BigNumber>;

    setAutomatedMarketMakerPair(
      pair: string,
      value: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setAutomatedMarketMakerPair(address,bool)"(
      pair: string,
      value: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    swapTokensAtAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "swapTokensAtAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    "symbol()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalFees(overrides?: CallOverrides): Promise<BigNumber>;

    "totalFees()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    tradingEnabledTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    "tradingEnabledTimestamp()"(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transfer(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferFrom(address,address,uint256)"(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    uniswapV2Pair(overrides?: CallOverrides): Promise<BigNumber>;

    "uniswapV2Pair()"(overrides?: CallOverrides): Promise<BigNumber>;

    uniswapV2Router(overrides?: CallOverrides): Promise<BigNumber>;

    "uniswapV2Router()"(overrides?: CallOverrides): Promise<BigNumber>;

    updateClaimWait(
      claimWait: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateClaimWait(uint256)"(
      claimWait: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updateDividendTracker(
      newAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateDividendTracker(address)"(
      newAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updateGasForProcessing(
      newValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateGasForProcessing(uint256)"(
      newValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updateLiquidityWallet(
      newLiquidityWallet: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateLiquidityWallet(address)"(
      newLiquidityWallet: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updateUniswapV2Router(
      newAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateUniswapV2Router(address)"(
      newAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    withdrawableDividendOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "withdrawableDividendOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ETHRewardsFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "ETHRewardsFee()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addFixedSaleEarlyParticipants(
      accounts: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addFixedSaleEarlyParticipants(address[])"(
      accounts: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "allowance(address,address)"(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "approve(address,uint256)"(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    automatedMarketMakerPairs(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "automatedMarketMakerPairs(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bounceFixedSaleWallet(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "bounceFixedSaleWallet()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claim(overrides?: Overrides): Promise<PopulatedTransaction>;

    "claim()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "decimals()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "decreaseAllowance(address,uint256)"(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    dividendTokenBalanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "dividendTokenBalanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    dividendTracker(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "dividendTracker()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    excludeFromFees(
      account: string,
      excluded: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "excludeFromFees(address,bool)"(
      account: string,
      excluded: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    excludeMultipleAccountsFromFees(
      accounts: string[],
      excluded: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "excludeMultipleAccountsFromFees(address[],bool)"(
      accounts: string[],
      excluded: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    fixedSaleBuyers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "fixedSaleBuyers(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fixedSaleEarlyParticipantBuysThreshold(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "fixedSaleEarlyParticipantBuysThreshold()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fixedSaleEarlyParticipantDuration(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "fixedSaleEarlyParticipantDuration()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fixedSaleEarlyParticipants(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "fixedSaleEarlyParticipants(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fixedSaleStartTimestamp(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "fixedSaleStartTimestamp()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    gasForProcessing(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "gasForProcessing()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAccountDividendsInfo(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAccountDividendsInfo(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAccountDividendsInfoAtIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAccountDividendsInfoAtIndex(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getClaimWait(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getClaimWait()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLastProcessedIndex(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getLastProcessedIndex()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNumberOfDividendTokenHolders(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getNumberOfDividendTokenHolders()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalDividendsDistributed(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTotalDividendsDistributed()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTradingIsEnabled(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTradingIsEnabled()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "increaseAllowance(address,uint256)"(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    isExcludedFromFees(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isExcludedFromFees(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidityFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "liquidityFee()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liquidityWallet(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "liquidityWallet()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxSellTransactionAmount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "maxSellTransactionAmount()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "name()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    numberOfFixedSaleBuys(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "numberOfFixedSaleBuys()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    processDividendTracker(
      gas: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "processDividendTracker(uint256)"(
      gas: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    sellFeeIncreaseFactor(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "sellFeeIncreaseFactor()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setAutomatedMarketMakerPair(
      pair: string,
      value: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setAutomatedMarketMakerPair(address,bool)"(
      pair: string,
      value: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    swapTokensAtAmount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "swapTokensAtAmount()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "symbol()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalFees(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalFees()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalSupply()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tradingEnabledTimestamp(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tradingEnabledTimestamp()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transfer(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferFrom(address,address,uint256)"(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    uniswapV2Pair(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "uniswapV2Pair()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    uniswapV2Router(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "uniswapV2Router()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateClaimWait(
      claimWait: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateClaimWait(uint256)"(
      claimWait: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updateDividendTracker(
      newAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateDividendTracker(address)"(
      newAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updateGasForProcessing(
      newValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateGasForProcessing(uint256)"(
      newValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updateLiquidityWallet(
      newLiquidityWallet: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateLiquidityWallet(address)"(
      newLiquidityWallet: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updateUniswapV2Router(
      newAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateUniswapV2Router(address)"(
      newAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    withdrawableDividendOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "withdrawableDividendOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
