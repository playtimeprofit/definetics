/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface DefineDividendTrackerInterface extends ethers.utils.Interface {
  functions: {
    "accumulativeDividendOf(address)": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "claimWait()": FunctionFragment;
    "decimals()": FunctionFragment;
    "decreaseAllowance(address,uint256)": FunctionFragment;
    "distributeDividends()": FunctionFragment;
    "dividendOf(address)": FunctionFragment;
    "excludeFromDividends(address)": FunctionFragment;
    "excludedFromDividends(address)": FunctionFragment;
    "getAccount(address)": FunctionFragment;
    "getAccountAtIndex(uint256)": FunctionFragment;
    "getLastProcessedIndex()": FunctionFragment;
    "getNumberOfTokenHolders()": FunctionFragment;
    "increaseAllowance(address,uint256)": FunctionFragment;
    "lastClaimTimes(address)": FunctionFragment;
    "lastProcessedIndex()": FunctionFragment;
    "minimumTokenBalanceForDividends()": FunctionFragment;
    "name()": FunctionFragment;
    "owner()": FunctionFragment;
    "process(uint256)": FunctionFragment;
    "processAccount(address,bool)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setBalance(address,uint256)": FunctionFragment;
    "symbol()": FunctionFragment;
    "totalDividendsDistributed()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateClaimWait(uint256)": FunctionFragment;
    "withdrawDividend()": FunctionFragment;
    "withdrawableDividendOf(address)": FunctionFragment;
    "withdrawnDividendOf(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "accumulativeDividendOf",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(functionFragment: "claimWait", values?: undefined): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "distributeDividends",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "dividendOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "excludeFromDividends",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "excludedFromDividends",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "getAccount", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getAccountAtIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLastProcessedIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNumberOfTokenHolders",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lastClaimTimes",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "lastProcessedIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minimumTokenBalanceForDividends",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "process",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "processAccount",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setBalance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalDividendsDistributed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateClaimWait",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawDividend",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawableDividendOf",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawnDividendOf",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "accumulativeDividendOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claimWait", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributeDividends",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dividendOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "excludeFromDividends",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "excludedFromDividends",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getAccount", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAccountAtIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastProcessedIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNumberOfTokenHolders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastClaimTimes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastProcessedIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minimumTokenBalanceForDividends",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "process", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "processAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setBalance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalDividendsDistributed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateClaimWait",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawDividend",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawableDividendOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawnDividendOf",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "Claim(address,uint256,bool)": EventFragment;
    "ClaimWaitUpdated(uint256,uint256)": EventFragment;
    "DividendWithdrawn(address,uint256)": EventFragment;
    "DividendsDistributed(address,uint256)": EventFragment;
    "ExcludeFromDividends(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Claim"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClaimWaitUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DividendWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DividendsDistributed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExcludeFromDividends"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export class DefineDividendTracker extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: DefineDividendTrackerInterface;

  functions: {
    accumulativeDividendOf(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "accumulativeDividendOf(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "allowance(address,address)"(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "approve(address,uint256)"(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    claimWait(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "claimWait()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    decimals(overrides?: CallOverrides): Promise<{
      0: number;
    }>;

    "decimals()"(overrides?: CallOverrides): Promise<{
      0: number;
    }>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "decreaseAllowance(address,uint256)"(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    distributeDividends(
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "distributeDividends()"(
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    dividendOf(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "dividendOf(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    excludeFromDividends(
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "excludeFromDividends(address)"(
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    excludedFromDividends(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "excludedFromDividends(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    getAccount(
      _account: string,
      overrides?: CallOverrides
    ): Promise<{
      account: string;
      index: BigNumber;
      iterationsUntilProcessed: BigNumber;
      withdrawableDividends: BigNumber;
      totalDividends: BigNumber;
      lastClaimTime: BigNumber;
      nextClaimTime: BigNumber;
      secondsUntilAutoClaimAvailable: BigNumber;
      0: string;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: BigNumber;
      7: BigNumber;
    }>;

    "getAccount(address)"(
      _account: string,
      overrides?: CallOverrides
    ): Promise<{
      account: string;
      index: BigNumber;
      iterationsUntilProcessed: BigNumber;
      withdrawableDividends: BigNumber;
      totalDividends: BigNumber;
      lastClaimTime: BigNumber;
      nextClaimTime: BigNumber;
      secondsUntilAutoClaimAvailable: BigNumber;
      0: string;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: BigNumber;
      7: BigNumber;
    }>;

    getAccountAtIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: BigNumber;
      7: BigNumber;
    }>;

    "getAccountAtIndex(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: BigNumber;
      7: BigNumber;
    }>;

    getLastProcessedIndex(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "getLastProcessedIndex()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    getNumberOfTokenHolders(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "getNumberOfTokenHolders()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "increaseAllowance(address,uint256)"(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    lastClaimTimes(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "lastClaimTimes(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    lastProcessedIndex(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "lastProcessedIndex()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    minimumTokenBalanceForDividends(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "minimumTokenBalanceForDividends()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    name(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "name()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    owner(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "owner()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    process(
      gas: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "process(uint256)"(
      gas: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    processAccount(
      account: string,
      automatic: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "processAccount(address,bool)"(
      account: string,
      automatic: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    setBalance(
      account: string,
      newBalance: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setBalance(address,uint256)"(
      account: string,
      newBalance: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "symbol()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    totalDividendsDistributed(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "totalDividendsDistributed()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    totalSupply(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "totalSupply()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transfer(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferFrom(address,address,uint256)"(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateClaimWait(
      newClaimWait: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateClaimWait(uint256)"(
      newClaimWait: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    withdrawDividend(overrides?: Overrides): Promise<ContractTransaction>;

    "withdrawDividend()"(overrides?: Overrides): Promise<ContractTransaction>;

    withdrawableDividendOf(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "withdrawableDividendOf(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    withdrawnDividendOf(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "withdrawnDividendOf(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;
  };

  accumulativeDividendOf(
    _owner: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "accumulativeDividendOf(address)"(
    _owner: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "allowance(address,address)"(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "approve(address,uint256)"(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  "balanceOf(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  claimWait(overrides?: CallOverrides): Promise<BigNumber>;

  "claimWait()"(overrides?: CallOverrides): Promise<BigNumber>;

  decimals(overrides?: CallOverrides): Promise<number>;

  "decimals()"(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "decreaseAllowance(address,uint256)"(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  distributeDividends(
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "distributeDividends()"(
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  dividendOf(_owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  "dividendOf(address)"(
    _owner: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  excludeFromDividends(
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "excludeFromDividends(address)"(
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  excludedFromDividends(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "excludedFromDividends(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getAccount(
    _account: string,
    overrides?: CallOverrides
  ): Promise<{
    account: string;
    index: BigNumber;
    iterationsUntilProcessed: BigNumber;
    withdrawableDividends: BigNumber;
    totalDividends: BigNumber;
    lastClaimTime: BigNumber;
    nextClaimTime: BigNumber;
    secondsUntilAutoClaimAvailable: BigNumber;
    0: string;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
    5: BigNumber;
    6: BigNumber;
    7: BigNumber;
  }>;

  "getAccount(address)"(
    _account: string,
    overrides?: CallOverrides
  ): Promise<{
    account: string;
    index: BigNumber;
    iterationsUntilProcessed: BigNumber;
    withdrawableDividends: BigNumber;
    totalDividends: BigNumber;
    lastClaimTime: BigNumber;
    nextClaimTime: BigNumber;
    secondsUntilAutoClaimAvailable: BigNumber;
    0: string;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
    5: BigNumber;
    6: BigNumber;
    7: BigNumber;
  }>;

  getAccountAtIndex(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    0: string;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
    5: BigNumber;
    6: BigNumber;
    7: BigNumber;
  }>;

  "getAccountAtIndex(uint256)"(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    0: string;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
    5: BigNumber;
    6: BigNumber;
    7: BigNumber;
  }>;

  getLastProcessedIndex(overrides?: CallOverrides): Promise<BigNumber>;

  "getLastProcessedIndex()"(overrides?: CallOverrides): Promise<BigNumber>;

  getNumberOfTokenHolders(overrides?: CallOverrides): Promise<BigNumber>;

  "getNumberOfTokenHolders()"(overrides?: CallOverrides): Promise<BigNumber>;

  increaseAllowance(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "increaseAllowance(address,uint256)"(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  lastClaimTimes(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "lastClaimTimes(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  lastProcessedIndex(overrides?: CallOverrides): Promise<BigNumber>;

  "lastProcessedIndex()"(overrides?: CallOverrides): Promise<BigNumber>;

  minimumTokenBalanceForDividends(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "minimumTokenBalanceForDividends()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  name(overrides?: CallOverrides): Promise<string>;

  "name()"(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  process(
    gas: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "process(uint256)"(
    gas: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  processAccount(
    account: string,
    automatic: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "processAccount(address,bool)"(
    account: string,
    automatic: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  setBalance(
    account: string,
    newBalance: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setBalance(address,uint256)"(
    account: string,
    newBalance: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  "symbol()"(overrides?: CallOverrides): Promise<string>;

  totalDividendsDistributed(overrides?: CallOverrides): Promise<BigNumber>;

  "totalDividendsDistributed()"(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transfer(address,uint256)"(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferFrom(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferFrom(address,address,uint256)"(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateClaimWait(
    newClaimWait: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateClaimWait(uint256)"(
    newClaimWait: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  withdrawDividend(overrides?: Overrides): Promise<ContractTransaction>;

  "withdrawDividend()"(overrides?: Overrides): Promise<ContractTransaction>;

  withdrawableDividendOf(
    _owner: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "withdrawableDividendOf(address)"(
    _owner: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  withdrawnDividendOf(
    _owner: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "withdrawnDividendOf(address)"(
    _owner: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    accumulativeDividendOf(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "accumulativeDividendOf(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowance(address,address)"(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "approve(address,uint256)"(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimWait(overrides?: CallOverrides): Promise<BigNumber>;

    "claimWait()"(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<number>;

    "decimals()"(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "decreaseAllowance(address,uint256)"(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    distributeDividends(overrides?: CallOverrides): Promise<void>;

    "distributeDividends()"(overrides?: CallOverrides): Promise<void>;

    dividendOf(_owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    "dividendOf(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    excludeFromDividends(
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "excludeFromDividends(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    excludedFromDividends(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "excludedFromDividends(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getAccount(
      _account: string,
      overrides?: CallOverrides
    ): Promise<{
      account: string;
      index: BigNumber;
      iterationsUntilProcessed: BigNumber;
      withdrawableDividends: BigNumber;
      totalDividends: BigNumber;
      lastClaimTime: BigNumber;
      nextClaimTime: BigNumber;
      secondsUntilAutoClaimAvailable: BigNumber;
      0: string;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: BigNumber;
      7: BigNumber;
    }>;

    "getAccount(address)"(
      _account: string,
      overrides?: CallOverrides
    ): Promise<{
      account: string;
      index: BigNumber;
      iterationsUntilProcessed: BigNumber;
      withdrawableDividends: BigNumber;
      totalDividends: BigNumber;
      lastClaimTime: BigNumber;
      nextClaimTime: BigNumber;
      secondsUntilAutoClaimAvailable: BigNumber;
      0: string;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: BigNumber;
      7: BigNumber;
    }>;

    getAccountAtIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: BigNumber;
      7: BigNumber;
    }>;

    "getAccountAtIndex(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: BigNumber;
      7: BigNumber;
    }>;

    getLastProcessedIndex(overrides?: CallOverrides): Promise<BigNumber>;

    "getLastProcessedIndex()"(overrides?: CallOverrides): Promise<BigNumber>;

    getNumberOfTokenHolders(overrides?: CallOverrides): Promise<BigNumber>;

    "getNumberOfTokenHolders()"(overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "increaseAllowance(address,uint256)"(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lastClaimTimes(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "lastClaimTimes(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastProcessedIndex(overrides?: CallOverrides): Promise<BigNumber>;

    "lastProcessedIndex()"(overrides?: CallOverrides): Promise<BigNumber>;

    minimumTokenBalanceForDividends(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "minimumTokenBalanceForDividends()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    "name()"(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    process(
      gas: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;

    "process(uint256)"(
      gas: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;

    processAccount(
      account: string,
      automatic: boolean,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "processAccount(address,bool)"(
      account: string,
      automatic: boolean,
      overrides?: CallOverrides
    ): Promise<boolean>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    setBalance(
      account: string,
      newBalance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setBalance(address,uint256)"(
      account: string,
      newBalance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    "symbol()"(overrides?: CallOverrides): Promise<string>;

    totalDividendsDistributed(overrides?: CallOverrides): Promise<BigNumber>;

    "totalDividendsDistributed()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transfer(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transferFrom(address,address,uint256)"(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateClaimWait(
      newClaimWait: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateClaimWait(uint256)"(
      newClaimWait: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawDividend(overrides?: CallOverrides): Promise<void>;

    "withdrawDividend()"(overrides?: CallOverrides): Promise<void>;

    withdrawableDividendOf(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "withdrawableDividendOf(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawnDividendOf(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "withdrawnDividendOf(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    Approval(
      owner: string | null,
      spender: string | null,
      value: null
    ): EventFilter;

    Claim(
      account: string | null,
      amount: null,
      automatic: boolean | null
    ): EventFilter;

    ClaimWaitUpdated(
      newValue: BigNumberish | null,
      oldValue: BigNumberish | null
    ): EventFilter;

    DividendWithdrawn(to: string | null, weiAmount: null): EventFilter;

    DividendsDistributed(from: string | null, weiAmount: null): EventFilter;

    ExcludeFromDividends(account: string | null): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;

    Transfer(from: string | null, to: string | null, value: null): EventFilter;
  };

  estimateGas: {
    accumulativeDividendOf(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "accumulativeDividendOf(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowance(address,address)"(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "approve(address,uint256)"(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimWait(overrides?: CallOverrides): Promise<BigNumber>;

    "claimWait()"(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    "decimals()"(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "decreaseAllowance(address,uint256)"(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    distributeDividends(overrides?: PayableOverrides): Promise<BigNumber>;

    "distributeDividends()"(overrides?: PayableOverrides): Promise<BigNumber>;

    dividendOf(_owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    "dividendOf(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    excludeFromDividends(
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "excludeFromDividends(address)"(
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    excludedFromDividends(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "excludedFromDividends(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAccount(_account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getAccount(address)"(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAccountAtIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAccountAtIndex(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLastProcessedIndex(overrides?: CallOverrides): Promise<BigNumber>;

    "getLastProcessedIndex()"(overrides?: CallOverrides): Promise<BigNumber>;

    getNumberOfTokenHolders(overrides?: CallOverrides): Promise<BigNumber>;

    "getNumberOfTokenHolders()"(overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "increaseAllowance(address,uint256)"(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    lastClaimTimes(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "lastClaimTimes(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastProcessedIndex(overrides?: CallOverrides): Promise<BigNumber>;

    "lastProcessedIndex()"(overrides?: CallOverrides): Promise<BigNumber>;

    minimumTokenBalanceForDividends(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "minimumTokenBalanceForDividends()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    "name()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    process(gas: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "process(uint256)"(
      gas: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    processAccount(
      account: string,
      automatic: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "processAccount(address,bool)"(
      account: string,
      automatic: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    setBalance(
      account: string,
      newBalance: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setBalance(address,uint256)"(
      account: string,
      newBalance: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    "symbol()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalDividendsDistributed(overrides?: CallOverrides): Promise<BigNumber>;

    "totalDividendsDistributed()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transfer(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferFrom(address,address,uint256)"(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updateClaimWait(
      newClaimWait: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateClaimWait(uint256)"(
      newClaimWait: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    withdrawDividend(overrides?: Overrides): Promise<BigNumber>;

    "withdrawDividend()"(overrides?: Overrides): Promise<BigNumber>;

    withdrawableDividendOf(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "withdrawableDividendOf(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawnDividendOf(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "withdrawnDividendOf(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    accumulativeDividendOf(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "accumulativeDividendOf(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "allowance(address,address)"(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "approve(address,uint256)"(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimWait(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "claimWait()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "decimals()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "decreaseAllowance(address,uint256)"(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    distributeDividends(
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "distributeDividends()"(
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    dividendOf(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "dividendOf(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    excludeFromDividends(
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "excludeFromDividends(address)"(
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    excludedFromDividends(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "excludedFromDividends(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAccount(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAccount(address)"(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAccountAtIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAccountAtIndex(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLastProcessedIndex(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getLastProcessedIndex()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNumberOfTokenHolders(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getNumberOfTokenHolders()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "increaseAllowance(address,uint256)"(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    lastClaimTimes(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "lastClaimTimes(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastProcessedIndex(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "lastProcessedIndex()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minimumTokenBalanceForDividends(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "minimumTokenBalanceForDividends()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "name()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    process(
      gas: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "process(uint256)"(
      gas: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    processAccount(
      account: string,
      automatic: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "processAccount(address,bool)"(
      account: string,
      automatic: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    setBalance(
      account: string,
      newBalance: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setBalance(address,uint256)"(
      account: string,
      newBalance: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "symbol()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalDividendsDistributed(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "totalDividendsDistributed()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalSupply()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transfer(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferFrom(address,address,uint256)"(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updateClaimWait(
      newClaimWait: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateClaimWait(uint256)"(
      newClaimWait: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    withdrawDividend(overrides?: Overrides): Promise<PopulatedTransaction>;

    "withdrawDividend()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    withdrawableDividendOf(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "withdrawableDividendOf(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawnDividendOf(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "withdrawnDividendOf(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
