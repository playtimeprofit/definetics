/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface UniswapV1ExchangeInterface extends ethers.utils.Interface {
  functions: {
    "setup(address)": FunctionFragment;
    "addLiquidity(uint256,uint256,uint256)": FunctionFragment;
    "removeLiquidity(uint256,uint256,uint256,uint256)": FunctionFragment;
    "__default__()": FunctionFragment;
    "ethToTokenSwapInput(uint256,uint256)": FunctionFragment;
    "ethToTokenTransferInput(uint256,uint256,address)": FunctionFragment;
    "ethToTokenSwapOutput(uint256,uint256)": FunctionFragment;
    "ethToTokenTransferOutput(uint256,uint256,address)": FunctionFragment;
    "tokenToEthSwapInput(uint256,uint256,uint256)": FunctionFragment;
    "tokenToEthTransferInput(uint256,uint256,uint256,address)": FunctionFragment;
    "tokenToEthSwapOutput(uint256,uint256,uint256)": FunctionFragment;
    "tokenToEthTransferOutput(uint256,uint256,uint256,address)": FunctionFragment;
    "tokenToTokenSwapInput(uint256,uint256,uint256,uint256,address)": FunctionFragment;
    "tokenToTokenTransferInput(uint256,uint256,uint256,uint256,address,address)": FunctionFragment;
    "tokenToTokenSwapOutput(uint256,uint256,uint256,uint256,address)": FunctionFragment;
    "tokenToTokenTransferOutput(uint256,uint256,uint256,uint256,address,address)": FunctionFragment;
    "tokenToExchangeSwapInput(uint256,uint256,uint256,uint256,address)": FunctionFragment;
    "tokenToExchangeTransferInput(uint256,uint256,uint256,uint256,address,address)": FunctionFragment;
    "tokenToExchangeSwapOutput(uint256,uint256,uint256,uint256,address)": FunctionFragment;
    "tokenToExchangeTransferOutput(uint256,uint256,uint256,uint256,address,address)": FunctionFragment;
    "getEthToTokenInputPrice(uint256)": FunctionFragment;
    "getEthToTokenOutputPrice(uint256)": FunctionFragment;
    "getTokenToEthInputPrice(uint256)": FunctionFragment;
    "getTokenToEthOutputPrice(uint256)": FunctionFragment;
    "tokenAddress()": FunctionFragment;
    "factoryAddress()": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "name()": FunctionFragment;
    "symbol()": FunctionFragment;
    "decimals()": FunctionFragment;
    "totalSupply()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "setup", values: [string]): string;
  encodeFunctionData(
    functionFragment: "addLiquidity",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidity",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "__default__",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ethToTokenSwapInput",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ethToTokenTransferInput",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "ethToTokenSwapOutput",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ethToTokenTransferOutput",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenToEthSwapInput",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenToEthTransferInput",
    values: [BigNumberish, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenToEthSwapOutput",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenToEthTransferOutput",
    values: [BigNumberish, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenToTokenSwapInput",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenToTokenTransferInput",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenToTokenSwapOutput",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenToTokenTransferOutput",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenToExchangeSwapInput",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenToExchangeTransferInput",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenToExchangeSwapOutput",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenToExchangeTransferOutput",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getEthToTokenInputPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getEthToTokenOutputPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenToEthInputPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenToEthOutputPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "factoryAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "setup", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "__default__",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ethToTokenSwapInput",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ethToTokenTransferInput",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ethToTokenSwapOutput",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ethToTokenTransferOutput",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenToEthSwapInput",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenToEthTransferInput",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenToEthSwapOutput",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenToEthTransferOutput",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenToTokenSwapInput",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenToTokenTransferInput",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenToTokenSwapOutput",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenToTokenTransferOutput",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenToExchangeSwapInput",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenToExchangeTransferInput",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenToExchangeSwapOutput",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenToExchangeTransferOutput",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEthToTokenInputPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEthToTokenOutputPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenToEthInputPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenToEthOutputPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "factoryAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;

  events: {
    "TokenPurchase(address,uint256,uint256)": EventFragment;
    "EthPurchase(address,uint256,uint256)": EventFragment;
    "AddLiquidity(address,uint256,uint256)": EventFragment;
    "RemoveLiquidity(address,uint256,uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "Approval(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "TokenPurchase"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EthPurchase"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AddLiquidity"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveLiquidity"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
}

export class UniswapV1Exchange extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: UniswapV1ExchangeInterface;

  functions: {
    setup(
      token_addr: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setup(address)"(
      token_addr: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    addLiquidity(
      min_liquidity: BigNumberish,
      max_tokens: BigNumberish,
      deadline: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "addLiquidity(uint256,uint256,uint256)"(
      min_liquidity: BigNumberish,
      max_tokens: BigNumberish,
      deadline: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    removeLiquidity(
      amount: BigNumberish,
      min_eth: BigNumberish,
      min_tokens: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "removeLiquidity(uint256,uint256,uint256,uint256)"(
      amount: BigNumberish,
      min_eth: BigNumberish,
      min_tokens: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    __default__(overrides?: PayableOverrides): Promise<ContractTransaction>;

    "__default__()"(overrides?: PayableOverrides): Promise<ContractTransaction>;

    ethToTokenSwapInput(
      min_tokens: BigNumberish,
      deadline: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "ethToTokenSwapInput(uint256,uint256)"(
      min_tokens: BigNumberish,
      deadline: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    ethToTokenTransferInput(
      min_tokens: BigNumberish,
      deadline: BigNumberish,
      recipient: string,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "ethToTokenTransferInput(uint256,uint256,address)"(
      min_tokens: BigNumberish,
      deadline: BigNumberish,
      recipient: string,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    ethToTokenSwapOutput(
      tokens_bought: BigNumberish,
      deadline: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "ethToTokenSwapOutput(uint256,uint256)"(
      tokens_bought: BigNumberish,
      deadline: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    ethToTokenTransferOutput(
      tokens_bought: BigNumberish,
      deadline: BigNumberish,
      recipient: string,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "ethToTokenTransferOutput(uint256,uint256,address)"(
      tokens_bought: BigNumberish,
      deadline: BigNumberish,
      recipient: string,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    tokenToEthSwapInput(
      tokens_sold: BigNumberish,
      min_eth: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "tokenToEthSwapInput(uint256,uint256,uint256)"(
      tokens_sold: BigNumberish,
      min_eth: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    tokenToEthTransferInput(
      tokens_sold: BigNumberish,
      min_eth: BigNumberish,
      deadline: BigNumberish,
      recipient: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "tokenToEthTransferInput(uint256,uint256,uint256,address)"(
      tokens_sold: BigNumberish,
      min_eth: BigNumberish,
      deadline: BigNumberish,
      recipient: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    tokenToEthSwapOutput(
      eth_bought: BigNumberish,
      max_tokens: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "tokenToEthSwapOutput(uint256,uint256,uint256)"(
      eth_bought: BigNumberish,
      max_tokens: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    tokenToEthTransferOutput(
      eth_bought: BigNumberish,
      max_tokens: BigNumberish,
      deadline: BigNumberish,
      recipient: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "tokenToEthTransferOutput(uint256,uint256,uint256,address)"(
      eth_bought: BigNumberish,
      max_tokens: BigNumberish,
      deadline: BigNumberish,
      recipient: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    tokenToTokenSwapInput(
      tokens_sold: BigNumberish,
      min_tokens_bought: BigNumberish,
      min_eth_bought: BigNumberish,
      deadline: BigNumberish,
      token_addr: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "tokenToTokenSwapInput(uint256,uint256,uint256,uint256,address)"(
      tokens_sold: BigNumberish,
      min_tokens_bought: BigNumberish,
      min_eth_bought: BigNumberish,
      deadline: BigNumberish,
      token_addr: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    tokenToTokenTransferInput(
      tokens_sold: BigNumberish,
      min_tokens_bought: BigNumberish,
      min_eth_bought: BigNumberish,
      deadline: BigNumberish,
      recipient: string,
      token_addr: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "tokenToTokenTransferInput(uint256,uint256,uint256,uint256,address,address)"(
      tokens_sold: BigNumberish,
      min_tokens_bought: BigNumberish,
      min_eth_bought: BigNumberish,
      deadline: BigNumberish,
      recipient: string,
      token_addr: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    tokenToTokenSwapOutput(
      tokens_bought: BigNumberish,
      max_tokens_sold: BigNumberish,
      max_eth_sold: BigNumberish,
      deadline: BigNumberish,
      token_addr: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "tokenToTokenSwapOutput(uint256,uint256,uint256,uint256,address)"(
      tokens_bought: BigNumberish,
      max_tokens_sold: BigNumberish,
      max_eth_sold: BigNumberish,
      deadline: BigNumberish,
      token_addr: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    tokenToTokenTransferOutput(
      tokens_bought: BigNumberish,
      max_tokens_sold: BigNumberish,
      max_eth_sold: BigNumberish,
      deadline: BigNumberish,
      recipient: string,
      token_addr: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "tokenToTokenTransferOutput(uint256,uint256,uint256,uint256,address,address)"(
      tokens_bought: BigNumberish,
      max_tokens_sold: BigNumberish,
      max_eth_sold: BigNumberish,
      deadline: BigNumberish,
      recipient: string,
      token_addr: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    tokenToExchangeSwapInput(
      tokens_sold: BigNumberish,
      min_tokens_bought: BigNumberish,
      min_eth_bought: BigNumberish,
      deadline: BigNumberish,
      exchange_addr: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "tokenToExchangeSwapInput(uint256,uint256,uint256,uint256,address)"(
      tokens_sold: BigNumberish,
      min_tokens_bought: BigNumberish,
      min_eth_bought: BigNumberish,
      deadline: BigNumberish,
      exchange_addr: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    tokenToExchangeTransferInput(
      tokens_sold: BigNumberish,
      min_tokens_bought: BigNumberish,
      min_eth_bought: BigNumberish,
      deadline: BigNumberish,
      recipient: string,
      exchange_addr: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "tokenToExchangeTransferInput(uint256,uint256,uint256,uint256,address,address)"(
      tokens_sold: BigNumberish,
      min_tokens_bought: BigNumberish,
      min_eth_bought: BigNumberish,
      deadline: BigNumberish,
      recipient: string,
      exchange_addr: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    tokenToExchangeSwapOutput(
      tokens_bought: BigNumberish,
      max_tokens_sold: BigNumberish,
      max_eth_sold: BigNumberish,
      deadline: BigNumberish,
      exchange_addr: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "tokenToExchangeSwapOutput(uint256,uint256,uint256,uint256,address)"(
      tokens_bought: BigNumberish,
      max_tokens_sold: BigNumberish,
      max_eth_sold: BigNumberish,
      deadline: BigNumberish,
      exchange_addr: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    tokenToExchangeTransferOutput(
      tokens_bought: BigNumberish,
      max_tokens_sold: BigNumberish,
      max_eth_sold: BigNumberish,
      deadline: BigNumberish,
      recipient: string,
      exchange_addr: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "tokenToExchangeTransferOutput(uint256,uint256,uint256,uint256,address,address)"(
      tokens_bought: BigNumberish,
      max_tokens_sold: BigNumberish,
      max_eth_sold: BigNumberish,
      deadline: BigNumberish,
      recipient: string,
      exchange_addr: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getEthToTokenInputPrice(
      eth_sold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      out: BigNumber;
      0: BigNumber;
    }>;

    "getEthToTokenInputPrice(uint256)"(
      eth_sold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      out: BigNumber;
      0: BigNumber;
    }>;

    getEthToTokenOutputPrice(
      tokens_bought: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      out: BigNumber;
      0: BigNumber;
    }>;

    "getEthToTokenOutputPrice(uint256)"(
      tokens_bought: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      out: BigNumber;
      0: BigNumber;
    }>;

    getTokenToEthInputPrice(
      tokens_sold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      out: BigNumber;
      0: BigNumber;
    }>;

    "getTokenToEthInputPrice(uint256)"(
      tokens_sold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      out: BigNumber;
      0: BigNumber;
    }>;

    getTokenToEthOutputPrice(
      eth_bought: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      out: BigNumber;
      0: BigNumber;
    }>;

    "getTokenToEthOutputPrice(uint256)"(
      eth_bought: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      out: BigNumber;
      0: BigNumber;
    }>;

    tokenAddress(overrides?: CallOverrides): Promise<{
      out: string;
      0: string;
    }>;

    "tokenAddress()"(overrides?: CallOverrides): Promise<{
      out: string;
      0: string;
    }>;

    factoryAddress(overrides?: CallOverrides): Promise<{
      out: string;
      0: string;
    }>;

    "factoryAddress()"(overrides?: CallOverrides): Promise<{
      out: string;
      0: string;
    }>;

    balanceOf(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<{
      out: BigNumber;
      0: BigNumber;
    }>;

    "balanceOf(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<{
      out: BigNumber;
      0: BigNumber;
    }>;

    transfer(
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transfer(address,uint256)"(
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferFrom(
      _from: string,
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferFrom(address,address,uint256)"(
      _from: string,
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    approve(
      _spender: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "approve(address,uint256)"(
      _spender: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    allowance(
      _owner: string,
      _spender: string,
      overrides?: CallOverrides
    ): Promise<{
      out: BigNumber;
      0: BigNumber;
    }>;

    "allowance(address,address)"(
      _owner: string,
      _spender: string,
      overrides?: CallOverrides
    ): Promise<{
      out: BigNumber;
      0: BigNumber;
    }>;

    name(overrides?: CallOverrides): Promise<{
      out: string;
      0: string;
    }>;

    "name()"(overrides?: CallOverrides): Promise<{
      out: string;
      0: string;
    }>;

    symbol(overrides?: CallOverrides): Promise<{
      out: string;
      0: string;
    }>;

    "symbol()"(overrides?: CallOverrides): Promise<{
      out: string;
      0: string;
    }>;

    decimals(overrides?: CallOverrides): Promise<{
      out: BigNumber;
      0: BigNumber;
    }>;

    "decimals()"(overrides?: CallOverrides): Promise<{
      out: BigNumber;
      0: BigNumber;
    }>;

    totalSupply(overrides?: CallOverrides): Promise<{
      out: BigNumber;
      0: BigNumber;
    }>;

    "totalSupply()"(overrides?: CallOverrides): Promise<{
      out: BigNumber;
      0: BigNumber;
    }>;
  };

  setup(
    token_addr: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setup(address)"(
    token_addr: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  addLiquidity(
    min_liquidity: BigNumberish,
    max_tokens: BigNumberish,
    deadline: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "addLiquidity(uint256,uint256,uint256)"(
    min_liquidity: BigNumberish,
    max_tokens: BigNumberish,
    deadline: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  removeLiquidity(
    amount: BigNumberish,
    min_eth: BigNumberish,
    min_tokens: BigNumberish,
    deadline: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "removeLiquidity(uint256,uint256,uint256,uint256)"(
    amount: BigNumberish,
    min_eth: BigNumberish,
    min_tokens: BigNumberish,
    deadline: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  __default__(overrides?: PayableOverrides): Promise<ContractTransaction>;

  "__default__()"(overrides?: PayableOverrides): Promise<ContractTransaction>;

  ethToTokenSwapInput(
    min_tokens: BigNumberish,
    deadline: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "ethToTokenSwapInput(uint256,uint256)"(
    min_tokens: BigNumberish,
    deadline: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  ethToTokenTransferInput(
    min_tokens: BigNumberish,
    deadline: BigNumberish,
    recipient: string,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "ethToTokenTransferInput(uint256,uint256,address)"(
    min_tokens: BigNumberish,
    deadline: BigNumberish,
    recipient: string,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  ethToTokenSwapOutput(
    tokens_bought: BigNumberish,
    deadline: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "ethToTokenSwapOutput(uint256,uint256)"(
    tokens_bought: BigNumberish,
    deadline: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  ethToTokenTransferOutput(
    tokens_bought: BigNumberish,
    deadline: BigNumberish,
    recipient: string,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "ethToTokenTransferOutput(uint256,uint256,address)"(
    tokens_bought: BigNumberish,
    deadline: BigNumberish,
    recipient: string,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  tokenToEthSwapInput(
    tokens_sold: BigNumberish,
    min_eth: BigNumberish,
    deadline: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "tokenToEthSwapInput(uint256,uint256,uint256)"(
    tokens_sold: BigNumberish,
    min_eth: BigNumberish,
    deadline: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  tokenToEthTransferInput(
    tokens_sold: BigNumberish,
    min_eth: BigNumberish,
    deadline: BigNumberish,
    recipient: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "tokenToEthTransferInput(uint256,uint256,uint256,address)"(
    tokens_sold: BigNumberish,
    min_eth: BigNumberish,
    deadline: BigNumberish,
    recipient: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  tokenToEthSwapOutput(
    eth_bought: BigNumberish,
    max_tokens: BigNumberish,
    deadline: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "tokenToEthSwapOutput(uint256,uint256,uint256)"(
    eth_bought: BigNumberish,
    max_tokens: BigNumberish,
    deadline: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  tokenToEthTransferOutput(
    eth_bought: BigNumberish,
    max_tokens: BigNumberish,
    deadline: BigNumberish,
    recipient: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "tokenToEthTransferOutput(uint256,uint256,uint256,address)"(
    eth_bought: BigNumberish,
    max_tokens: BigNumberish,
    deadline: BigNumberish,
    recipient: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  tokenToTokenSwapInput(
    tokens_sold: BigNumberish,
    min_tokens_bought: BigNumberish,
    min_eth_bought: BigNumberish,
    deadline: BigNumberish,
    token_addr: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "tokenToTokenSwapInput(uint256,uint256,uint256,uint256,address)"(
    tokens_sold: BigNumberish,
    min_tokens_bought: BigNumberish,
    min_eth_bought: BigNumberish,
    deadline: BigNumberish,
    token_addr: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  tokenToTokenTransferInput(
    tokens_sold: BigNumberish,
    min_tokens_bought: BigNumberish,
    min_eth_bought: BigNumberish,
    deadline: BigNumberish,
    recipient: string,
    token_addr: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "tokenToTokenTransferInput(uint256,uint256,uint256,uint256,address,address)"(
    tokens_sold: BigNumberish,
    min_tokens_bought: BigNumberish,
    min_eth_bought: BigNumberish,
    deadline: BigNumberish,
    recipient: string,
    token_addr: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  tokenToTokenSwapOutput(
    tokens_bought: BigNumberish,
    max_tokens_sold: BigNumberish,
    max_eth_sold: BigNumberish,
    deadline: BigNumberish,
    token_addr: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "tokenToTokenSwapOutput(uint256,uint256,uint256,uint256,address)"(
    tokens_bought: BigNumberish,
    max_tokens_sold: BigNumberish,
    max_eth_sold: BigNumberish,
    deadline: BigNumberish,
    token_addr: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  tokenToTokenTransferOutput(
    tokens_bought: BigNumberish,
    max_tokens_sold: BigNumberish,
    max_eth_sold: BigNumberish,
    deadline: BigNumberish,
    recipient: string,
    token_addr: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "tokenToTokenTransferOutput(uint256,uint256,uint256,uint256,address,address)"(
    tokens_bought: BigNumberish,
    max_tokens_sold: BigNumberish,
    max_eth_sold: BigNumberish,
    deadline: BigNumberish,
    recipient: string,
    token_addr: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  tokenToExchangeSwapInput(
    tokens_sold: BigNumberish,
    min_tokens_bought: BigNumberish,
    min_eth_bought: BigNumberish,
    deadline: BigNumberish,
    exchange_addr: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "tokenToExchangeSwapInput(uint256,uint256,uint256,uint256,address)"(
    tokens_sold: BigNumberish,
    min_tokens_bought: BigNumberish,
    min_eth_bought: BigNumberish,
    deadline: BigNumberish,
    exchange_addr: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  tokenToExchangeTransferInput(
    tokens_sold: BigNumberish,
    min_tokens_bought: BigNumberish,
    min_eth_bought: BigNumberish,
    deadline: BigNumberish,
    recipient: string,
    exchange_addr: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "tokenToExchangeTransferInput(uint256,uint256,uint256,uint256,address,address)"(
    tokens_sold: BigNumberish,
    min_tokens_bought: BigNumberish,
    min_eth_bought: BigNumberish,
    deadline: BigNumberish,
    recipient: string,
    exchange_addr: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  tokenToExchangeSwapOutput(
    tokens_bought: BigNumberish,
    max_tokens_sold: BigNumberish,
    max_eth_sold: BigNumberish,
    deadline: BigNumberish,
    exchange_addr: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "tokenToExchangeSwapOutput(uint256,uint256,uint256,uint256,address)"(
    tokens_bought: BigNumberish,
    max_tokens_sold: BigNumberish,
    max_eth_sold: BigNumberish,
    deadline: BigNumberish,
    exchange_addr: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  tokenToExchangeTransferOutput(
    tokens_bought: BigNumberish,
    max_tokens_sold: BigNumberish,
    max_eth_sold: BigNumberish,
    deadline: BigNumberish,
    recipient: string,
    exchange_addr: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "tokenToExchangeTransferOutput(uint256,uint256,uint256,uint256,address,address)"(
    tokens_bought: BigNumberish,
    max_tokens_sold: BigNumberish,
    max_eth_sold: BigNumberish,
    deadline: BigNumberish,
    recipient: string,
    exchange_addr: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getEthToTokenInputPrice(
    eth_sold: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getEthToTokenInputPrice(uint256)"(
    eth_sold: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getEthToTokenOutputPrice(
    tokens_bought: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getEthToTokenOutputPrice(uint256)"(
    tokens_bought: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTokenToEthInputPrice(
    tokens_sold: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getTokenToEthInputPrice(uint256)"(
    tokens_sold: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTokenToEthOutputPrice(
    eth_bought: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getTokenToEthOutputPrice(uint256)"(
    eth_bought: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenAddress(overrides?: CallOverrides): Promise<string>;

  "tokenAddress()"(overrides?: CallOverrides): Promise<string>;

  factoryAddress(overrides?: CallOverrides): Promise<string>;

  "factoryAddress()"(overrides?: CallOverrides): Promise<string>;

  balanceOf(_owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  "balanceOf(address)"(
    _owner: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  transfer(
    _to: string,
    _value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transfer(address,uint256)"(
    _to: string,
    _value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferFrom(
    _from: string,
    _to: string,
    _value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferFrom(address,address,uint256)"(
    _from: string,
    _to: string,
    _value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  approve(
    _spender: string,
    _value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "approve(address,uint256)"(
    _spender: string,
    _value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  allowance(
    _owner: string,
    _spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "allowance(address,address)"(
    _owner: string,
    _spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  name(overrides?: CallOverrides): Promise<string>;

  "name()"(overrides?: CallOverrides): Promise<string>;

  symbol(overrides?: CallOverrides): Promise<string>;

  "symbol()"(overrides?: CallOverrides): Promise<string>;

  decimals(overrides?: CallOverrides): Promise<BigNumber>;

  "decimals()"(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    setup(token_addr: string, overrides?: CallOverrides): Promise<void>;

    "setup(address)"(
      token_addr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addLiquidity(
      min_liquidity: BigNumberish,
      max_tokens: BigNumberish,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "addLiquidity(uint256,uint256,uint256)"(
      min_liquidity: BigNumberish,
      max_tokens: BigNumberish,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeLiquidity(
      amount: BigNumberish,
      min_eth: BigNumberish,
      min_tokens: BigNumberish,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      out: BigNumber;
      out: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "removeLiquidity(uint256,uint256,uint256,uint256)"(
      amount: BigNumberish,
      min_eth: BigNumberish,
      min_tokens: BigNumberish,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      out: BigNumber;
      out: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    __default__(overrides?: CallOverrides): Promise<void>;

    "__default__()"(overrides?: CallOverrides): Promise<void>;

    ethToTokenSwapInput(
      min_tokens: BigNumberish,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "ethToTokenSwapInput(uint256,uint256)"(
      min_tokens: BigNumberish,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ethToTokenTransferInput(
      min_tokens: BigNumberish,
      deadline: BigNumberish,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "ethToTokenTransferInput(uint256,uint256,address)"(
      min_tokens: BigNumberish,
      deadline: BigNumberish,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ethToTokenSwapOutput(
      tokens_bought: BigNumberish,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "ethToTokenSwapOutput(uint256,uint256)"(
      tokens_bought: BigNumberish,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ethToTokenTransferOutput(
      tokens_bought: BigNumberish,
      deadline: BigNumberish,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "ethToTokenTransferOutput(uint256,uint256,address)"(
      tokens_bought: BigNumberish,
      deadline: BigNumberish,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenToEthSwapInput(
      tokens_sold: BigNumberish,
      min_eth: BigNumberish,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokenToEthSwapInput(uint256,uint256,uint256)"(
      tokens_sold: BigNumberish,
      min_eth: BigNumberish,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenToEthTransferInput(
      tokens_sold: BigNumberish,
      min_eth: BigNumberish,
      deadline: BigNumberish,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokenToEthTransferInput(uint256,uint256,uint256,address)"(
      tokens_sold: BigNumberish,
      min_eth: BigNumberish,
      deadline: BigNumberish,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenToEthSwapOutput(
      eth_bought: BigNumberish,
      max_tokens: BigNumberish,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokenToEthSwapOutput(uint256,uint256,uint256)"(
      eth_bought: BigNumberish,
      max_tokens: BigNumberish,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenToEthTransferOutput(
      eth_bought: BigNumberish,
      max_tokens: BigNumberish,
      deadline: BigNumberish,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokenToEthTransferOutput(uint256,uint256,uint256,address)"(
      eth_bought: BigNumberish,
      max_tokens: BigNumberish,
      deadline: BigNumberish,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenToTokenSwapInput(
      tokens_sold: BigNumberish,
      min_tokens_bought: BigNumberish,
      min_eth_bought: BigNumberish,
      deadline: BigNumberish,
      token_addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokenToTokenSwapInput(uint256,uint256,uint256,uint256,address)"(
      tokens_sold: BigNumberish,
      min_tokens_bought: BigNumberish,
      min_eth_bought: BigNumberish,
      deadline: BigNumberish,
      token_addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenToTokenTransferInput(
      tokens_sold: BigNumberish,
      min_tokens_bought: BigNumberish,
      min_eth_bought: BigNumberish,
      deadline: BigNumberish,
      recipient: string,
      token_addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokenToTokenTransferInput(uint256,uint256,uint256,uint256,address,address)"(
      tokens_sold: BigNumberish,
      min_tokens_bought: BigNumberish,
      min_eth_bought: BigNumberish,
      deadline: BigNumberish,
      recipient: string,
      token_addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenToTokenSwapOutput(
      tokens_bought: BigNumberish,
      max_tokens_sold: BigNumberish,
      max_eth_sold: BigNumberish,
      deadline: BigNumberish,
      token_addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokenToTokenSwapOutput(uint256,uint256,uint256,uint256,address)"(
      tokens_bought: BigNumberish,
      max_tokens_sold: BigNumberish,
      max_eth_sold: BigNumberish,
      deadline: BigNumberish,
      token_addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenToTokenTransferOutput(
      tokens_bought: BigNumberish,
      max_tokens_sold: BigNumberish,
      max_eth_sold: BigNumberish,
      deadline: BigNumberish,
      recipient: string,
      token_addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokenToTokenTransferOutput(uint256,uint256,uint256,uint256,address,address)"(
      tokens_bought: BigNumberish,
      max_tokens_sold: BigNumberish,
      max_eth_sold: BigNumberish,
      deadline: BigNumberish,
      recipient: string,
      token_addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenToExchangeSwapInput(
      tokens_sold: BigNumberish,
      min_tokens_bought: BigNumberish,
      min_eth_bought: BigNumberish,
      deadline: BigNumberish,
      exchange_addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokenToExchangeSwapInput(uint256,uint256,uint256,uint256,address)"(
      tokens_sold: BigNumberish,
      min_tokens_bought: BigNumberish,
      min_eth_bought: BigNumberish,
      deadline: BigNumberish,
      exchange_addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenToExchangeTransferInput(
      tokens_sold: BigNumberish,
      min_tokens_bought: BigNumberish,
      min_eth_bought: BigNumberish,
      deadline: BigNumberish,
      recipient: string,
      exchange_addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokenToExchangeTransferInput(uint256,uint256,uint256,uint256,address,address)"(
      tokens_sold: BigNumberish,
      min_tokens_bought: BigNumberish,
      min_eth_bought: BigNumberish,
      deadline: BigNumberish,
      recipient: string,
      exchange_addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenToExchangeSwapOutput(
      tokens_bought: BigNumberish,
      max_tokens_sold: BigNumberish,
      max_eth_sold: BigNumberish,
      deadline: BigNumberish,
      exchange_addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokenToExchangeSwapOutput(uint256,uint256,uint256,uint256,address)"(
      tokens_bought: BigNumberish,
      max_tokens_sold: BigNumberish,
      max_eth_sold: BigNumberish,
      deadline: BigNumberish,
      exchange_addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenToExchangeTransferOutput(
      tokens_bought: BigNumberish,
      max_tokens_sold: BigNumberish,
      max_eth_sold: BigNumberish,
      deadline: BigNumberish,
      recipient: string,
      exchange_addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokenToExchangeTransferOutput(uint256,uint256,uint256,uint256,address,address)"(
      tokens_bought: BigNumberish,
      max_tokens_sold: BigNumberish,
      max_eth_sold: BigNumberish,
      deadline: BigNumberish,
      recipient: string,
      exchange_addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEthToTokenInputPrice(
      eth_sold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getEthToTokenInputPrice(uint256)"(
      eth_sold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEthToTokenOutputPrice(
      tokens_bought: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getEthToTokenOutputPrice(uint256)"(
      tokens_bought: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenToEthInputPrice(
      tokens_sold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTokenToEthInputPrice(uint256)"(
      tokens_sold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenToEthOutputPrice(
      eth_bought: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTokenToEthOutputPrice(uint256)"(
      eth_bought: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenAddress(overrides?: CallOverrides): Promise<string>;

    "tokenAddress()"(overrides?: CallOverrides): Promise<string>;

    factoryAddress(overrides?: CallOverrides): Promise<string>;

    "factoryAddress()"(overrides?: CallOverrides): Promise<string>;

    balanceOf(_owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transfer(
      _to: string,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transfer(address,uint256)"(
      _to: string,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      _from: string,
      _to: string,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transferFrom(address,address,uint256)"(
      _from: string,
      _to: string,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    approve(
      _spender: string,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "approve(address,uint256)"(
      _spender: string,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    allowance(
      _owner: string,
      _spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowance(address,address)"(
      _owner: string,
      _spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    "name()"(overrides?: CallOverrides): Promise<string>;

    symbol(overrides?: CallOverrides): Promise<string>;

    "symbol()"(overrides?: CallOverrides): Promise<string>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    "decimals()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    TokenPurchase(
      buyer: string | null,
      eth_sold: BigNumberish | null,
      tokens_bought: BigNumberish | null
    ): EventFilter;

    EthPurchase(
      buyer: string | null,
      tokens_sold: BigNumberish | null,
      eth_bought: BigNumberish | null
    ): EventFilter;

    AddLiquidity(
      provider: string | null,
      eth_amount: BigNumberish | null,
      token_amount: BigNumberish | null
    ): EventFilter;

    RemoveLiquidity(
      provider: string | null,
      eth_amount: BigNumberish | null,
      token_amount: BigNumberish | null
    ): EventFilter;

    Transfer(
      _from: string | null,
      _to: string | null,
      _value: null
    ): EventFilter;

    Approval(
      _owner: string | null,
      _spender: string | null,
      _value: null
    ): EventFilter;
  };

  estimateGas: {
    setup(token_addr: string, overrides?: Overrides): Promise<BigNumber>;

    "setup(address)"(
      token_addr: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    addLiquidity(
      min_liquidity: BigNumberish,
      max_tokens: BigNumberish,
      deadline: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "addLiquidity(uint256,uint256,uint256)"(
      min_liquidity: BigNumberish,
      max_tokens: BigNumberish,
      deadline: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    removeLiquidity(
      amount: BigNumberish,
      min_eth: BigNumberish,
      min_tokens: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "removeLiquidity(uint256,uint256,uint256,uint256)"(
      amount: BigNumberish,
      min_eth: BigNumberish,
      min_tokens: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    __default__(overrides?: PayableOverrides): Promise<BigNumber>;

    "__default__()"(overrides?: PayableOverrides): Promise<BigNumber>;

    ethToTokenSwapInput(
      min_tokens: BigNumberish,
      deadline: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "ethToTokenSwapInput(uint256,uint256)"(
      min_tokens: BigNumberish,
      deadline: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    ethToTokenTransferInput(
      min_tokens: BigNumberish,
      deadline: BigNumberish,
      recipient: string,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "ethToTokenTransferInput(uint256,uint256,address)"(
      min_tokens: BigNumberish,
      deadline: BigNumberish,
      recipient: string,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    ethToTokenSwapOutput(
      tokens_bought: BigNumberish,
      deadline: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "ethToTokenSwapOutput(uint256,uint256)"(
      tokens_bought: BigNumberish,
      deadline: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    ethToTokenTransferOutput(
      tokens_bought: BigNumberish,
      deadline: BigNumberish,
      recipient: string,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "ethToTokenTransferOutput(uint256,uint256,address)"(
      tokens_bought: BigNumberish,
      deadline: BigNumberish,
      recipient: string,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    tokenToEthSwapInput(
      tokens_sold: BigNumberish,
      min_eth: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "tokenToEthSwapInput(uint256,uint256,uint256)"(
      tokens_sold: BigNumberish,
      min_eth: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    tokenToEthTransferInput(
      tokens_sold: BigNumberish,
      min_eth: BigNumberish,
      deadline: BigNumberish,
      recipient: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "tokenToEthTransferInput(uint256,uint256,uint256,address)"(
      tokens_sold: BigNumberish,
      min_eth: BigNumberish,
      deadline: BigNumberish,
      recipient: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    tokenToEthSwapOutput(
      eth_bought: BigNumberish,
      max_tokens: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "tokenToEthSwapOutput(uint256,uint256,uint256)"(
      eth_bought: BigNumberish,
      max_tokens: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    tokenToEthTransferOutput(
      eth_bought: BigNumberish,
      max_tokens: BigNumberish,
      deadline: BigNumberish,
      recipient: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "tokenToEthTransferOutput(uint256,uint256,uint256,address)"(
      eth_bought: BigNumberish,
      max_tokens: BigNumberish,
      deadline: BigNumberish,
      recipient: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    tokenToTokenSwapInput(
      tokens_sold: BigNumberish,
      min_tokens_bought: BigNumberish,
      min_eth_bought: BigNumberish,
      deadline: BigNumberish,
      token_addr: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "tokenToTokenSwapInput(uint256,uint256,uint256,uint256,address)"(
      tokens_sold: BigNumberish,
      min_tokens_bought: BigNumberish,
      min_eth_bought: BigNumberish,
      deadline: BigNumberish,
      token_addr: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    tokenToTokenTransferInput(
      tokens_sold: BigNumberish,
      min_tokens_bought: BigNumberish,
      min_eth_bought: BigNumberish,
      deadline: BigNumberish,
      recipient: string,
      token_addr: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "tokenToTokenTransferInput(uint256,uint256,uint256,uint256,address,address)"(
      tokens_sold: BigNumberish,
      min_tokens_bought: BigNumberish,
      min_eth_bought: BigNumberish,
      deadline: BigNumberish,
      recipient: string,
      token_addr: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    tokenToTokenSwapOutput(
      tokens_bought: BigNumberish,
      max_tokens_sold: BigNumberish,
      max_eth_sold: BigNumberish,
      deadline: BigNumberish,
      token_addr: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "tokenToTokenSwapOutput(uint256,uint256,uint256,uint256,address)"(
      tokens_bought: BigNumberish,
      max_tokens_sold: BigNumberish,
      max_eth_sold: BigNumberish,
      deadline: BigNumberish,
      token_addr: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    tokenToTokenTransferOutput(
      tokens_bought: BigNumberish,
      max_tokens_sold: BigNumberish,
      max_eth_sold: BigNumberish,
      deadline: BigNumberish,
      recipient: string,
      token_addr: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "tokenToTokenTransferOutput(uint256,uint256,uint256,uint256,address,address)"(
      tokens_bought: BigNumberish,
      max_tokens_sold: BigNumberish,
      max_eth_sold: BigNumberish,
      deadline: BigNumberish,
      recipient: string,
      token_addr: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    tokenToExchangeSwapInput(
      tokens_sold: BigNumberish,
      min_tokens_bought: BigNumberish,
      min_eth_bought: BigNumberish,
      deadline: BigNumberish,
      exchange_addr: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "tokenToExchangeSwapInput(uint256,uint256,uint256,uint256,address)"(
      tokens_sold: BigNumberish,
      min_tokens_bought: BigNumberish,
      min_eth_bought: BigNumberish,
      deadline: BigNumberish,
      exchange_addr: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    tokenToExchangeTransferInput(
      tokens_sold: BigNumberish,
      min_tokens_bought: BigNumberish,
      min_eth_bought: BigNumberish,
      deadline: BigNumberish,
      recipient: string,
      exchange_addr: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "tokenToExchangeTransferInput(uint256,uint256,uint256,uint256,address,address)"(
      tokens_sold: BigNumberish,
      min_tokens_bought: BigNumberish,
      min_eth_bought: BigNumberish,
      deadline: BigNumberish,
      recipient: string,
      exchange_addr: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    tokenToExchangeSwapOutput(
      tokens_bought: BigNumberish,
      max_tokens_sold: BigNumberish,
      max_eth_sold: BigNumberish,
      deadline: BigNumberish,
      exchange_addr: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "tokenToExchangeSwapOutput(uint256,uint256,uint256,uint256,address)"(
      tokens_bought: BigNumberish,
      max_tokens_sold: BigNumberish,
      max_eth_sold: BigNumberish,
      deadline: BigNumberish,
      exchange_addr: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    tokenToExchangeTransferOutput(
      tokens_bought: BigNumberish,
      max_tokens_sold: BigNumberish,
      max_eth_sold: BigNumberish,
      deadline: BigNumberish,
      recipient: string,
      exchange_addr: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "tokenToExchangeTransferOutput(uint256,uint256,uint256,uint256,address,address)"(
      tokens_bought: BigNumberish,
      max_tokens_sold: BigNumberish,
      max_eth_sold: BigNumberish,
      deadline: BigNumberish,
      recipient: string,
      exchange_addr: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getEthToTokenInputPrice(
      eth_sold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getEthToTokenInputPrice(uint256)"(
      eth_sold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEthToTokenOutputPrice(
      tokens_bought: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getEthToTokenOutputPrice(uint256)"(
      tokens_bought: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenToEthInputPrice(
      tokens_sold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTokenToEthInputPrice(uint256)"(
      tokens_sold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenToEthOutputPrice(
      eth_bought: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTokenToEthOutputPrice(uint256)"(
      eth_bought: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "tokenAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    factoryAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "factoryAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(_owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transfer(
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transfer(address,uint256)"(
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferFrom(
      _from: string,
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferFrom(address,address,uint256)"(
      _from: string,
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    approve(
      _spender: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "approve(address,uint256)"(
      _spender: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    allowance(
      _owner: string,
      _spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowance(address,address)"(
      _owner: string,
      _spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    "name()"(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    "symbol()"(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    "decimals()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    setup(
      token_addr: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setup(address)"(
      token_addr: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    addLiquidity(
      min_liquidity: BigNumberish,
      max_tokens: BigNumberish,
      deadline: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "addLiquidity(uint256,uint256,uint256)"(
      min_liquidity: BigNumberish,
      max_tokens: BigNumberish,
      deadline: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    removeLiquidity(
      amount: BigNumberish,
      min_eth: BigNumberish,
      min_tokens: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "removeLiquidity(uint256,uint256,uint256,uint256)"(
      amount: BigNumberish,
      min_eth: BigNumberish,
      min_tokens: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    __default__(overrides?: PayableOverrides): Promise<PopulatedTransaction>;

    "__default__()"(
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    ethToTokenSwapInput(
      min_tokens: BigNumberish,
      deadline: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "ethToTokenSwapInput(uint256,uint256)"(
      min_tokens: BigNumberish,
      deadline: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    ethToTokenTransferInput(
      min_tokens: BigNumberish,
      deadline: BigNumberish,
      recipient: string,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "ethToTokenTransferInput(uint256,uint256,address)"(
      min_tokens: BigNumberish,
      deadline: BigNumberish,
      recipient: string,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    ethToTokenSwapOutput(
      tokens_bought: BigNumberish,
      deadline: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "ethToTokenSwapOutput(uint256,uint256)"(
      tokens_bought: BigNumberish,
      deadline: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    ethToTokenTransferOutput(
      tokens_bought: BigNumberish,
      deadline: BigNumberish,
      recipient: string,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "ethToTokenTransferOutput(uint256,uint256,address)"(
      tokens_bought: BigNumberish,
      deadline: BigNumberish,
      recipient: string,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    tokenToEthSwapInput(
      tokens_sold: BigNumberish,
      min_eth: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "tokenToEthSwapInput(uint256,uint256,uint256)"(
      tokens_sold: BigNumberish,
      min_eth: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    tokenToEthTransferInput(
      tokens_sold: BigNumberish,
      min_eth: BigNumberish,
      deadline: BigNumberish,
      recipient: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "tokenToEthTransferInput(uint256,uint256,uint256,address)"(
      tokens_sold: BigNumberish,
      min_eth: BigNumberish,
      deadline: BigNumberish,
      recipient: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    tokenToEthSwapOutput(
      eth_bought: BigNumberish,
      max_tokens: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "tokenToEthSwapOutput(uint256,uint256,uint256)"(
      eth_bought: BigNumberish,
      max_tokens: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    tokenToEthTransferOutput(
      eth_bought: BigNumberish,
      max_tokens: BigNumberish,
      deadline: BigNumberish,
      recipient: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "tokenToEthTransferOutput(uint256,uint256,uint256,address)"(
      eth_bought: BigNumberish,
      max_tokens: BigNumberish,
      deadline: BigNumberish,
      recipient: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    tokenToTokenSwapInput(
      tokens_sold: BigNumberish,
      min_tokens_bought: BigNumberish,
      min_eth_bought: BigNumberish,
      deadline: BigNumberish,
      token_addr: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "tokenToTokenSwapInput(uint256,uint256,uint256,uint256,address)"(
      tokens_sold: BigNumberish,
      min_tokens_bought: BigNumberish,
      min_eth_bought: BigNumberish,
      deadline: BigNumberish,
      token_addr: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    tokenToTokenTransferInput(
      tokens_sold: BigNumberish,
      min_tokens_bought: BigNumberish,
      min_eth_bought: BigNumberish,
      deadline: BigNumberish,
      recipient: string,
      token_addr: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "tokenToTokenTransferInput(uint256,uint256,uint256,uint256,address,address)"(
      tokens_sold: BigNumberish,
      min_tokens_bought: BigNumberish,
      min_eth_bought: BigNumberish,
      deadline: BigNumberish,
      recipient: string,
      token_addr: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    tokenToTokenSwapOutput(
      tokens_bought: BigNumberish,
      max_tokens_sold: BigNumberish,
      max_eth_sold: BigNumberish,
      deadline: BigNumberish,
      token_addr: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "tokenToTokenSwapOutput(uint256,uint256,uint256,uint256,address)"(
      tokens_bought: BigNumberish,
      max_tokens_sold: BigNumberish,
      max_eth_sold: BigNumberish,
      deadline: BigNumberish,
      token_addr: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    tokenToTokenTransferOutput(
      tokens_bought: BigNumberish,
      max_tokens_sold: BigNumberish,
      max_eth_sold: BigNumberish,
      deadline: BigNumberish,
      recipient: string,
      token_addr: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "tokenToTokenTransferOutput(uint256,uint256,uint256,uint256,address,address)"(
      tokens_bought: BigNumberish,
      max_tokens_sold: BigNumberish,
      max_eth_sold: BigNumberish,
      deadline: BigNumberish,
      recipient: string,
      token_addr: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    tokenToExchangeSwapInput(
      tokens_sold: BigNumberish,
      min_tokens_bought: BigNumberish,
      min_eth_bought: BigNumberish,
      deadline: BigNumberish,
      exchange_addr: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "tokenToExchangeSwapInput(uint256,uint256,uint256,uint256,address)"(
      tokens_sold: BigNumberish,
      min_tokens_bought: BigNumberish,
      min_eth_bought: BigNumberish,
      deadline: BigNumberish,
      exchange_addr: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    tokenToExchangeTransferInput(
      tokens_sold: BigNumberish,
      min_tokens_bought: BigNumberish,
      min_eth_bought: BigNumberish,
      deadline: BigNumberish,
      recipient: string,
      exchange_addr: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "tokenToExchangeTransferInput(uint256,uint256,uint256,uint256,address,address)"(
      tokens_sold: BigNumberish,
      min_tokens_bought: BigNumberish,
      min_eth_bought: BigNumberish,
      deadline: BigNumberish,
      recipient: string,
      exchange_addr: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    tokenToExchangeSwapOutput(
      tokens_bought: BigNumberish,
      max_tokens_sold: BigNumberish,
      max_eth_sold: BigNumberish,
      deadline: BigNumberish,
      exchange_addr: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "tokenToExchangeSwapOutput(uint256,uint256,uint256,uint256,address)"(
      tokens_bought: BigNumberish,
      max_tokens_sold: BigNumberish,
      max_eth_sold: BigNumberish,
      deadline: BigNumberish,
      exchange_addr: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    tokenToExchangeTransferOutput(
      tokens_bought: BigNumberish,
      max_tokens_sold: BigNumberish,
      max_eth_sold: BigNumberish,
      deadline: BigNumberish,
      recipient: string,
      exchange_addr: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "tokenToExchangeTransferOutput(uint256,uint256,uint256,uint256,address,address)"(
      tokens_bought: BigNumberish,
      max_tokens_sold: BigNumberish,
      max_eth_sold: BigNumberish,
      deadline: BigNumberish,
      recipient: string,
      exchange_addr: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getEthToTokenInputPrice(
      eth_sold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getEthToTokenInputPrice(uint256)"(
      eth_sold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEthToTokenOutputPrice(
      tokens_bought: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getEthToTokenOutputPrice(uint256)"(
      tokens_bought: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenToEthInputPrice(
      tokens_sold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTokenToEthInputPrice(uint256)"(
      tokens_sold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenToEthOutputPrice(
      eth_bought: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTokenToEthOutputPrice(uint256)"(
      eth_bought: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "tokenAddress()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    factoryAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "factoryAddress()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOf(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transfer(
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transfer(address,uint256)"(
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferFrom(
      _from: string,
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferFrom(address,address,uint256)"(
      _from: string,
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    approve(
      _spender: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "approve(address,uint256)"(
      _spender: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    allowance(
      _owner: string,
      _spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "allowance(address,address)"(
      _owner: string,
      _spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "name()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "symbol()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "decimals()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalSupply()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
